(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.VueGridMultiselect = factory());
}(this, (function () { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var isEmpty = function isEmpty(value) {
    return value === null || value === undefined || value === "";
  };

  var copyArray = function copyArray(array) {
    return array.map(function (item) {
      return _objectSpread2({}, item);
    });
  };

  var flatGroupBy = function flatGroupBy(items, key) {
    if (checkGroupField(items, key)) return [];
    var copy = copyArray(items);
    var grouped = copy.reduce(function (acc, item) {
      (acc[item[key]] = acc[item[key]] || []).push(item);
      return acc;
    }, {}),
        groups = Object.keys(grouped);
    var flatten = [];
    groups.forEach(function (group) {
      flatten.push({
        $label: group,
        $isGroup: true
      });
      flatten = flatten.concat(grouped[group]);
    });
    return flatten;
  };

  var checkGroupField = function checkGroupField(items, key) {
    var itemWithoutGroupingField = items.find(function (item) {
      return isEmpty(item[key]);
    });
    var hasItemWithoutGroupingField = !isEmpty(itemWithoutGroupingField);

    if (hasItemWithoutGroupingField) {
      console.warn('Item '.concat(JSON.stringify(itemWithoutGroupingField)).concat(' doesn not contain grouping field: '.concat(key)));
    }

    return hasItemWithoutGroupingField;
  };

  var guid = function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  var ensureValue = function ensureValue(value) {
    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return Array.isArray(value) ? value[index] || value[0] : value;
  };

  //
  var script = {
    name: "vue-gridmultiselect",
    data: function data() {
      return {
        guid: null,
        menuVisible: false,
        searchTerm: null,
        rowDetails: []
      };
    },
    mounted: function mounted() {
      this.guid = guid();
    },
    props: {
      title: {
        type: String,
        "default": "Grid Multiselect"
      },
      itemLabel: {
        value: [String, Array],
        required: true
      },
      itemKey: {
        type: String,
        required: true
      },
      items: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      value: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      searchable: {
        type: Boolean,
        "default": true
      },
      emptyMessage: {
        type: String,
        "default": "No Data"
      },
      groupBy: {
        type: String
      },
      itemDetails: {
        type: String
      },
      menuPosition: {
        type: String,
        "default": "dock"
      },
      tabIndex: {
        type: Number,
        "default": 0
      }
    },
    computed: {
      selectedItemLabel: function selectedItemLabel() {
        var isItemLabelArray = Array.isArray(this.itemLabel);
        var hasSelectedItemLabelDefined = isItemLabelArray && this.itemLabel.length > 1;
        return hasSelectedItemLabelDefined ? this.itemLabel[1] : ensureValue(this.itemLabel);
      },
      internalItems: function internalItems() {
        var _this = this;

        var copy = isEmpty(this.groupBy) ? copyArray(this.items) : flatGroupBy(this.items, this.groupBy);
        return isEmpty(this.searchTerm) ? copy : copy.filter(function (item) {
          if (item.$isGroup) return true;

          var label = _this.getItemLabel(item);

          return label.trim().toLowerCase().indexOf(_this.searchTerm.trim().toLowerCase()) > -1;
        });
      },
      selectedItems: {
        get: function get() {
          return this.value || [];
        },
        set: function set(newValue) {
          this.$emit("input", newValue);
        }
      },
      isGroupingEnabled: function isGroupingEnabled() {
        return !isEmpty(this.groupBy);
      },
      itemsEmptyMessage: function itemsEmptyMessage() {
        return ensureValue(this.emptyMessage.split("|"));
      },
      selectedItemsEmptyMessage: function selectedItemsEmptyMessage() {
        return ensureValue(this.emptyMessage.split("|"), 1);
      },
      isRowDetailEnabled: function isRowDetailEnabled() {
        return !isEmpty(this.itemDetails);
      },
      isMenuFloating: function isMenuFloating() {
        return this.menuPosition === "float";
      }
    },
    methods: {
      showMenu: function showMenu() {
        if (this.menuVisible) return;
        this.menuVisible = true;
        var el = this.searchable ? this.$refs.search : this.$el;
        this.$nextTick(function () {
          el.focus();
        });
      },
      removeItem: function removeItem(index) {
        var removedItem = this.selectedItems.splice(index, 1);
        this.$emit("item-removed", removedItem);
      },
      getItemLabel: function getItemLabel(item) {
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "itemLabel";
        var label = ensureValue(this[key]);
        return label.split("|").map(function (label) {
          return item[label.trim()];
        }).join(" ").trim();
      },
      selectItem: function selectItem(selectedItem) {
        if (this.menuVisible) return;
        this.$emit("item-selected", selectedItem);
      },
      isSelected: function isSelected(item) {
        var itemKey = this.itemKey;
        return this.selectedItems.some(function (i) {
          return i[itemKey] === item[itemKey];
        });
      },
      hasSlot: function hasSlot(name) {
        return !!this.$slots[name] || !!this.$scopedSlots[name];
      },
      toggleDetails: function toggleDetails(item) {
        var isOpened = this.rowDetails.includes(item[this.itemKey]);

        if (!isOpened) {
          this.rowDetails.push(item[this.itemKey]);
          return;
        }

        var index = this.rowDetails.indexOf(item[this.itemKey]);
        this.rowDetails.splice(index, 1);
      },
      getRowDetailsIndicatorClass: function getRowDetailsIndicatorClass(item) {
        return this.isRowDetailEnabled ? "gridmultiselect__selecteditemtext--".concat(this.rowDetails.includes(item[this.itemKey]) ? "expanded" : "collapsed") : null;
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  /* script */
  var __vue_script__ = script;
  /* template */

  var __vue_render__ = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      staticClass: "gridmultiselect",
      "class": {
        'gridmultiselect--floatingmenu': _vm.isMenuFloating
      },
      attrs: {
        "tabindex": _vm.searchable ? -1 : _vm.tabIndex
      },
      on: {
        "blur": function blur($event) {
          _vm.menuVisible = false;
        }
      }
    }, [_c('div', {
      staticClass: "gridmultiselect__header"
    }, [_c('span', {
      staticClass: "gridmultiselect__title"
    }, [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _c('transition', {
      attrs: {
        "name": "gridmultiselect__slide"
      }
    }, [_c('button', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: !_vm.menuVisible,
        expression: "!menuVisible"
      }],
      staticClass: "gridmultiselect__burger",
      on: {
        "click": _vm.showMenu
      }
    }, [_c('span', {
      staticClass: "gridmultiselect__burgerline"
    }, [_vm._v(" ")]), _vm._v(" "), _c('span', {
      staticClass: "gridmultiselect__burgerline"
    }, [_vm._v(" ")]), _vm._v(" "), _c('span', {
      staticClass: "gridmultiselect__burgerline"
    }, [_vm._v(" ")])])])], 1), _vm._v(" "), _c('ul', {
      staticClass: "gridmultiselect__selecteditems"
    }, [_vm.selectedItems.length === 0 ? _c('li', {
      staticClass: "gridmultiselect__selecteditem--empty"
    }, [_vm._v(_vm._s(_vm.selectedItemsEmptyMessage))]) : _vm._l(_vm.selectedItems, function (selectedItem, index) {
      return _c('li', {
        key: selectedItem[_vm.itemKey],
        staticClass: "gridmultiselect__selecteditem gridmultiselect__selecteditem--font-small",
        on: {
          "click": function click($event) {
            return _vm.selectItem(selectedItem);
          }
        }
      }, [_c('div', {
        staticClass: "gridmultiselect__selecteditemtext",
        "class": [{
          'gridmultiselect__selecteditemtext--cursor-pointer': _vm.isRowDetailEnabled
        }, _vm.getRowDetailsIndicatorClass(selectedItem)],
        on: {
          "click": function click($event) {
            _vm.isRowDetailEnabled ? _vm.toggleDetails(selectedItem) : null;
          }
        }
      }, [_vm._t("selected-item", [_vm._v("\n          " + _vm._s(_vm.getItemLabel(selectedItem, "selectedItemLabel")) + "\n          "), _vm.isGroupingEnabled ? _c('span', {
        staticClass: "gridmultiselect__selecteditemgroupbadge"
      }, [_vm._v("(" + _vm._s(selectedItem[_vm.groupBy]) + ")")]) : _vm._e()], {
        "selectedItem": selectedItem
      }), _vm._v(" "), _c('transition', {
        attrs: {
          "name": "gridmultiselect__slidedown"
        }
      }, [_vm.isRowDetailEnabled ? _c('div', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: _vm.rowDetails.includes(selectedItem[_vm.itemKey]),
          expression: "rowDetails.includes(selectedItem[itemKey])"
        }],
        staticClass: "gridmultiselect__selecteditemdetails"
      }, [_vm._t("selected-item-details", [_vm._v(_vm._s(_vm.getItemLabel(selectedItem, "itemDetails")))], {
        "selectedItem": selectedItem
      })], 2) : _vm._e()])], 2), _vm._v(" "), _c('div', {
        staticClass: "gridmultiselect__removebutton gridmultiselect__removebutton--font-small",
        on: {
          "click": function click($event) {
            return _vm.removeItem(index);
          }
        }
      }, [_vm._v("x")])]);
    }), _vm._v(" "), _vm.hasSlot('selected-items-footer') ? _c('li', {
      staticClass: "gridmultiselect__selecteditemitemsfooter"
    }, [_vm._t("selected-items-footer")], 2) : _vm._e()], 2), _vm._v(" "), _c('transition', {
      attrs: {
        "name": "gridmultiselect__slide"
      }
    }, [_c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.menuVisible,
        expression: "menuVisible"
      }],
      ref: "menu",
      staticClass: "gridmultiselect__items-wrap",
      "class": {
        'gridmultiselect__items-floatingwrap': _vm.isMenuFloating
      },
      on: {
        "mousedown": function mousedown($event) {
          $event.preventDefault();
        }
      }
    }, [_c('ul', {
      staticClass: "gridmultiselect__items",
      on: {
        "mousedown": function mousedown($event) {
          $event.preventDefault();
        }
      }
    }, [_vm.searchable ? _c('li', {
      staticClass: "gridmultiselect__searchfield-wrap"
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: _vm.searchTerm,
        expression: "searchTerm"
      }],
      ref: "search",
      staticClass: "gridmultiselect__searchfield gridmultiselect__searchfield--font-small",
      attrs: {
        "type": "text",
        "placeholder": "Search...",
        "tabindex": _vm.tabIndex
      },
      domProps: {
        "value": _vm.searchTerm
      },
      on: {
        "focus": function focus($event) {
          $event.preventDefault();
          return _vm.showMenu($event);
        },
        "blur": function blur($event) {
          $event.preventDefault();
          _vm.menuVisible = false;
        },
        "input": function input($event) {
          if ($event.target.composing) {
            return;
          }

          _vm.searchTerm = $event.target.value;
        }
      }
    })]) : _vm._e(), _vm._v(" "), _vm.internalItems.length === 0 ? _c('li', {
      staticClass: "gridmultiselect__item--empty"
    }, [_vm._v(_vm._s(_vm.itemsEmptyMessage))]) : _vm._l(_vm.internalItems, function (item) {
      return _c('li', {
        key: item[_vm.itemKey],
        staticClass: "gridmultiselect__item",
        "class": {
          'gridmultiselect__item--selected': _vm.isSelected(item)
        }
      }, [item.$isGroup ? _c('span', {
        staticClass: "gridmultiselect__itemgrouptext"
      }, [_vm._v(_vm._s(item.$label))]) : _vm._e(), _vm._v(" "), !item.$isGroup && !item.$isDisabled ? _c('span', {
        staticClass: "gridmultiselect__itemcb-wrap"
      }, [_c('input', {
        directives: [{
          name: "model",
          rawName: "v-model",
          value: _vm.selectedItems,
          expression: "selectedItems"
        }],
        staticClass: "gridmultiselect__itemcb",
        attrs: {
          "type": "checkbox",
          "id": 'item-cb' + item[_vm.itemKey] + '_' + _vm.guid
        },
        domProps: {
          "value": item,
          "checked": Array.isArray(_vm.selectedItems) ? _vm._i(_vm.selectedItems, item) > -1 : _vm.selectedItems
        },
        on: {
          "change": function change($event) {
            var $$a = _vm.selectedItems,
                $$el = $event.target,
                $$c = $$el.checked ? true : false;

            if (Array.isArray($$a)) {
              var $$v = item,
                  $$i = _vm._i($$a, $$v);

              if ($$el.checked) {
                $$i < 0 && (_vm.selectedItems = $$a.concat([$$v]));
              } else {
                $$i > -1 && (_vm.selectedItems = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
              }
            } else {
              _vm.selectedItems = $$c;
            }
          }
        }
      })]) : _vm._e(), _vm._v(" "), !item.$isGroup ? _c('span', {
        staticClass: "gridmultiselect__itemtext"
      }, [_vm._t("item", [_c('label', {
        staticClass: "gridmultiselect__itemlabel gridmultiselect__itemlabel--font-small",
        "class": {
          'gridmultiselect__itemlabel--disabled': item.$isDisabled
        },
        attrs: {
          "for": item.$isDisabled ? null : 'item-cb' + item[_vm.itemKey] + '_' + _vm.guid
        }
      }, [_vm._v(_vm._s(_vm.getItemLabel(item)))])], {
        "item": item
      })], 2) : _vm._e()]);
    }), _vm._v(" "), _vm.hasSlot('items-footer') ? _c('li', {
      staticClass: "gridmultiselect__itemsfooter"
    }, [_vm._t("items-footer")], 2) : _vm._e()], 2)])])], 1);
  };

  var __vue_staticRenderFns__ = [];
  /* style */

  var __vue_inject_styles__ = undefined;
  /* scoped */

  var __vue_scope_id__ = undefined;
  /* module identifier */

  var __vue_module_identifier__ = undefined;
  /* functional template */

  var __vue_is_functional_template__ = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__ = normalizeComponent_1({
    render: __vue_render__,
    staticRenderFns: __vue_staticRenderFns__
  }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

  return __vue_component__;

})));
